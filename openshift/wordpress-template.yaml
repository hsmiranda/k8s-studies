apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: wordpress
objects:
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      template: mysql-ephemeral-template
    name: mysql
  spec:
    ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: 3306
    selector:
      name: mysql
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: wordpress-frontend
    name: wordpress-frontend
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: wordpress-frontend
      deploymentconfig: wordpress-frontend
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
    labels:
      app: wordpress-frontend
    name: wordpress
  spec:
    dockerImageRepository: docker.io/mfojtik/wordpress
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: wordpress-frontend
    name: wordpress-frontend
- apiVersion: v1
  kind: BuildConfig
  metadata:
    creationTimestamp: null
    labels:
      app: wordpress-frontend
    name: wordpress-frontend
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: wordpress-frontend:latest
    postCommit: {}
    resources: {}
    source:
      git:
        uri: ${SITE_REPOSITORY}
      secrets: []
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: wordpress:latest
      type: Source
    triggers:
    - github:
        secret: TcaowunWDfKGNFWPRQP6
      type: GitHub
    - generic:
        secret: 9FcerQuhlnRNl5etEr3l
      type: Generic
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
  status:
    lastVersion: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    labels:
      template: mysql-ephemeral-template
    name: mysql
  spec:
    replicas: 1
    selector:
      name: mysql
    strategy:
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: mysql
      spec:
        containers:
        - env:
          - name: MYSQL_USER
            value: ${MYSQL_USER}
          - name: MYSQL_PASSWORD
            value: ${MYSQL_PASSWORD}
          - name: MYSQL_DATABASE
            value: ${MYSQL_DATABASE}
          image: centos/mysql-56-centos7
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 3306
            timeoutSeconds: 1
          name: mysql
          ports:
          - containerPort: 3306
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE
                -e 'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 512Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/mysql/data
            name: mysql-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: mysql-data
    test: false
    triggers:
    - imageChangeParams:
        containerNames:
        - mysql
        from:
          kind: ImageStreamTag
          name: mysql:latest
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
  status: {}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    labels:
      app: wordpress-frontend
    name: wordpress-frontend
  spec:
    replicas: 1
    selector:
      app: wordpress-frontend
      deploymentconfig: wordpress-frontend
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: wordpress-frontend
          deploymentconfig: wordpress-frontend
      spec:
        containers:
        - env:
          - name: MYSQL_USER
            value: ${MYSQL_USER}
          - name: MYSQL_PASSWORD
            value: ${MYSQL_PASSWORD}
          - name: MYSQL_DATABASE
            value: ${MYSQL_DATABASE}
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            httpGet:
              path: "/"
              port: 8080
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 1
            periodSeconds: 2
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: "/"
              port: 8080
          image: wordpress-frontend
          imagePullPolicy: Always
          name: wordpress-frontend
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /opt/app-root/wp-content
            name: wordpress-frontend-volume-1
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: wordpress-frontend-volume-1
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - wordpress-frontend
        from:
          kind: ImageStreamTag
          name: wordpress-frontend:latest
      type: ImageChange
  status: {}
parameters:
- description: GIT repository with Wordpress customizations
  displayName: User Wordpress GIT repository (can be empty repo)
  name: SITE_REPOSITORY
  value: 'https://github.com/mfojtik/wordpress-sample'
  required: true
- description: Wordpress Docker image version to use
  displayName: Wordpress version (use 'latest' for latest version)
  name: WORDPRESS_VERSION
  value: '4.5'
  required: true
- description: Database name
  displayName: MySQL database name
  name: MYSQL_DATABASE
  value: wordpress
  required: true
- description: Database user name
  displayName: MySQL database user name
  name: MYSQL_USER
  value: wordpress
  required: true
- description: Database user password
  displayName: MySQL database user password
  name: MYSQL_PASSWORD
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  required: true
