apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: sonarqube3-template
metadata:
  annotations:
    description: SonarQube 3 persistent template
    tags: ci,test,sonarqube
  name: sonarqube
  namespace: build
objects:


- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: sonarqube
      release: sonarqube
    name: sonarqube-sonarqube
  spec:
    ports:
    - name: sonarqube
      port: 9000
      protocol: TCP
      targetPort: 9000
    selector:
      app: sonarqube
      release: sonarqube
    sessionAffinity: None
    type: ClusterIP

- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: sonarqube
      release: sonarqube
    name: sonarqube-sonarqube-copy-plugins
  data:
    copy_plugins.sh: |-
        #!/bin/bash
        for f in /opt/sonarqube/extensions/plugins/tmp/*.jar
        do
          file=${f##*/} && file=${file%-[0-9]*}
          for original in /opt/sonarqube/extensions/plugins/*.jar
          do
            originalfile=${original##*/} && originalfile=${originalfile%-[0-9]*}
            if [ \"$originalfile\" = \"$file\" ]; then
              rm -f \"$original\"
            fi
          done
        done
        cp /opt/sonarqube/extensions/plugins/tmp/*.jar /opt/sonarqube/extensions/plugins/
        /opt/sonarqube/bin/run.sh

- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: sonarqube
      release: sonarqube
    name: sonarqube-sonarqube-tests
    data:
    run.sh: |-
      @test "Testing Sonarqube UI is accessible" {
        curl --connect-timeout 5 --retry 12 --retry-delay 1 --retry-max-time 60 ${SERVICE_NAME}:9000/sessions/new
      }


- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: sonarqube
      release: sonarqube
    name: sonarqube-sonarqube-tests
    data:
    sonar.properties: |-
      # LDAP CONFIGURATION

      # Enable the LDAP feature
      sonar.security.realm=LDAP

      # URL of the LDAP server. Note that if you are using ldaps, then you should install the server certificate into the Java truststore.
      ldap.url=ldap://localhost:10389

      # Bind DN is the username of an LDAP user to connect (or bind) with. Leave this blank for anonymous access to the LDAP directory (optional)
      ldap.bindDn=cn=sonar,ou=users,o=mycompany

      # Bind Password is the password of the user to connect with. Leave this blank for anonymous access to the LDAP directory (optional)
      ldap.bindPassword=secret

      # Possible values: simple | CRAM-MD5 | DIGEST-MD5 | GSSAPI See http://java.sun.com/products/jndi/tutorial/ldap/security/auth.html (default: simple)
      # ldap.authentication=simple

      # See :
      #   * http://java.sun.com/products/jndi/tutorial/ldap/security/digest.html
      #   * http://java.sun.com/products/jndi/tutorial/ldap/security/crammd5.html
      # (optional)
      # ldap.realm=example.org

      # GROUP MAPPING

      # Distinguished Name (DN) of the root node in LDAP from which to search for groups. (optional, default: empty)
      # ldap.group.baseDn=cn=groups,dc=example,dc=org

      # LDAP group request (default: (&(objectClass=groupOfUniqueNames)(uniqueMember={dn})) )
      ldap.group.request=(&(objectClass=user)(member={grupo openshift}))

      # Property used to specifiy the attribute to be used for returning the list of user groups in the compatibility mode. (default: cn)
      ldap.group.idAttribute=sAMAccountName


- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      app: sonarqube-postgresql
      release: sonarqube
    name: sonarqube-postgresql
  type: Opaque
  data:
    postgres-password: c29uYXJQYXNz

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app: sonarqube
      release: sonarqube
    name: sonarqube-sonarqube
  spec:
    accessModes:
      - {{ .Values.persistence.accessMode | quote }}
    resources:
      requests:
        storage: {{ .Values.persistence.size | quote }}
          {{- if .Values.persistence.storageClass }}
          {{- if (eq "-" .Values.persistence.storageClass) }}
        storageClassName: ""
        {{- else }}
        storageClassName: "{{ .Values.persistence.storageClass }}"
        {{- end }}
        {{- end }}
        {{- end }}

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: sonarqube
    release: sonarqube
  name: sonarqube-sonarqube
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sonarqube
      release: sonarqube
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: sonarqube
        release: sonarqube
    spec:
      containers:
      - env:
        - name: SONARQUBE_JDBC_USERNAME
          value: sonarUser
        - name: SONARQUBE_JDBC_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgres-password
              name: sonarqube-postgresql
        - name: SONARQUBE_JDBC_URL
          value: jdbc:postgresql://sonarqube-postgresql:5432/sonarDB
        image: sonarqube:7.7-community
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /sessions/new
            port: 9000
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
        name: sonarqube
        ports:
        - containerPort: 9000
          protocol: TCP
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /sessions/new
            port: 9000
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /opt/sonarqube/data
          name: sonarqube
          subPath: data
        - mountPath: /opt/sonarqube/extensions/plugins/tmp
          name: sonarqube
          subPath: tmp
        - mountPath: /opt/sonarqube/extensions/downloads
          name: sonarqube
          subPath: downloads
        - mountPath: /opt/sonarqube/extensions/plugins
          name: sonarqube
          subPath: plugins
        - mountPath: /opt/sonarqube/temp
          name: sonarqube
          subPath: temp
        - mountPath: /opt/sonarqube/logs
          name: sonarqube
          subPath: logs
        - mountPath: /tmp
          name: tmp-dir
        - mountPath: /tmp/scripts
          name: copy-plugins
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 999
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          items:
          - key: install_plugins.sh
            path: install_plugins.sh
          name: sonarqube-sonarqube-install-plugins
        name: install-plugins
      - configMap:
          defaultMode: 493
          items:
          - key: copy_plugins.sh
            path: copy_plugins.sh
          name: sonarqube-sonarqube-copy-plugins
        name: copy-plugins
      - emptyDir: {}
        name: sonarqube
      - emptyDir: {}
        name: tmp-dir


parameters:
- displayName: SonarQube service name
  name: SERVICE_NAME
  required: true
  value: nexus
- displayName: SonarQube version image
  name: SONARQUBE_VERSION
  required: true
  value: 7.7-community
- description: Volume space available for Sonatype Nexus e.g. 512Mi, 2Gi
  displayName: Volume Space for Nexus
  name: VOLUME_CAPACITY
  required: true
  value: 50Gi
- description: Max memory allocated to the Nexus pod
  displayName: Max Memory
  name: MAX_MEMORY
  required: true
  value: 1G
